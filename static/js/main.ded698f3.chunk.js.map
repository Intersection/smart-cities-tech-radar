{"version":3,"sources":["Introduction.js","Navbar.js","Quadrant.js","App.js","serviceWorker.js","index.js"],"names":["Introduction","react_default","a","createElement","className","id","href","rel","target","Component","Navbar","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ringNames","Quadrant","_this","this","props","category","name","map","key","_","capitalize","rings","entry","App","src_Navbar","src_Introduction","src_Quadrant","radarData","platforms","languages_frameworks","tools","techniques","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ded698f3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Introduction extends Component {\n  render() {\n    return (\n      <div className=\"row pt-5\" id=\"introduction\">\n        <div className=\"col-12\">\n          <h2>What is the tech radar?</h2>\n          <p>\n            The tech radar for&nbsp;\n            <a href=\"https://www.intersection.com\" rel=\"noopener noreferrer\" target=\"_blank\">Intersection</a>'s\n            Smart Cities team is the list of technologies, tools, and techniques in our team's ecosystem. It is inspired by&nbsp;\n            <a href=\"https://www.thoughtworks.com/radar\" rel=\"noopener noreferrer\" target=\"_blank\">ThoughtWorks' Tech Radar</a>.\n            Entries in each section (quadrant) of the tech radar are placed in one of the following categories (rings):\n          </p>\n\n          <ul>\n            <li>\n              <strong>Adopt</strong> — Entries in this ring are core to our ecosystem. They are the default choice when starting new projects, and are technologies we have chosen to stand behind as a fundamental piece of our stack.\n            </li>\n            <li>\n              <strong>Trial</strong> — These are items that we have started to use, but may not be proven as a core part of our toolkit yet. We may use them in new projects, but not without a bit of discussion to make sure we want to expand our footprint.\n            </li>\n            <li>\n              <strong>Assess</strong> — These are the things we want to learn more about in the nearterm. We probably don't have them in production yet, but we likely have a candidate project in mind that we will use to assess them.\n            </li>\n            <li>\n              <strong>Hold</strong> — These entries are on hold. Technologies in this ring are likely being phased out, though are still present in our toolkit. We are unlikely to start any new projects using items in this ring.\n            </li>\n          </ul>\n\n          <h2>How do we use it?</h2>\n          <p>\n            The Tech Radar helps drive the technical decisions that we make. Items in the Adopt category are default choices for new projects. As we find new technologies that interest us and seem relevant to our team, we add them to the Assess ring. The radar also serves as a public statement of technologies that are important to us.\n          </p>\n\n          <p>\n            The source for this radar is&nbsp;\n            <a href=\"https://github.com/intersection/smart-cities-tech-radar\" rel=\"noopener noreferrer\" target=\"_blank\">available on GitHub</a>.\n            If you are interested in joining our team,&nbsp;\n            <a href=\"https://www.intersection.com/join-our-team\" rel=\"noopener noreferrer\" target=\"_blank\">we're hiring</a>!\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Introduction;\n","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg sticky-top navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#introduction\">\n          Intersection Smart Cities Tech Radar\n        </a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#platforms\">Platforms</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#languages\">Languages & Frameworks</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#tools\">Tools</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#techniques\">Techniques</a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport _ from 'lodash';\n\nconst ringNames = [\"adopt\", \"trial\", \"assess\", \"hold\"];\n\nclass Quadrant extends Component {\n  render() {\n    return (\n      <div className=\"row pt-5\" id={this.props.category}>\n        <div className=\"col-12 header\"><h1 className=\"border-bottom border-secondary\">{this.props.name}</h1></div>\n        {ringNames.map((name) =>\n          <div className=\"col\" key={name}>\n            <ul className=\"list-group\">\n              <li className={\"list-group-item text-white bg-\"+this.props.category}><h3>{_.capitalize(name)}</h3></li>\n              {this.props.rings[name].map((entry) => <li className=\"list-group-item\" key={entry}>{entry}</li> )}\n            </ul>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Quadrant;\n","import React, { Component } from 'react';\nimport Introduction from './Introduction.js';\nimport Navbar from './Navbar.js';\nimport radarData from './radar.json';\nimport Quadrant from './Quadrant.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container pb-5\">\n          <Navbar />\n          <Introduction />\n          <Quadrant name=\"Platforms\" rings={radarData.platforms} category=\"platforms\" />\n          <Quadrant name=\"Languages & Frameworks\" rings={radarData.languages_frameworks} category=\"languages\" />\n          <Quadrant name=\"Tools\" rings={radarData.tools} category=\"tools\" />\n          <Quadrant name=\"Techniques\" rings={radarData.techniques} category=\"techniques\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}